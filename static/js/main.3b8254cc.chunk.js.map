{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","prop","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCFKC,G,MAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAEvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCHMG,G,wDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAeRJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAM,CACTd,SAAU,GACVW,YAAa,IALC,E,qDAUlB,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAACV,SAAUmB,S,oBAO5C,WAAU,IAAD,EAEyBC,KAAKN,MAA/Bd,EAFC,EAEDA,SAAUW,EAFT,EAESA,YAEVU,EAAmBrB,EAASsB,QAAQ,SAAA3B,GAAO,OAC/CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGnD,OACE,sBAAK/B,UAAU,MAAf,UAEG,oDAEA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAegB,KAAKhB,eAEtB,cAAC,EAAD,CAAUJ,SAAWqB,W,GAtCII,IAAMC,YCKxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3b8254cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n\r\n    <div className=\"card-list\">\r\n        {props.monsters.map( monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n    \r\n\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n\r\n  <input \r\n    className='search'\r\n    type=\"search\" \r\n    placeholder={ placeholder } \r\n    onChange={ handleChange }\r\n  />\r\n\r\n)","import React from \"react\";\r\n\r\nimport { CardList } from './components/card-list/card-list.component'\r\nimport { SearchBox } from './components/search-box/search-box.component'\r\n\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(prop) {\r\n    super(prop)\r\n\r\n    this.state={\r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((users) => this.setState({monsters: users}));\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ searchField: e.target.value });\r\n  }\r\n\r\n  render() {\r\n\r\n    let { monsters, searchField } = this.state;\r\n\r\n    const filteredMonsters = monsters.filter( monster => \r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n   return (\r\n     <div className=\"App\">\r\n\r\n        <h1> Monsters Rolodex </h1>\r\n\r\n        <SearchBox \r\n          placeholder='search monsters'\r\n          handleChange={ this.handleChange }\r\n        />\r\n        <CardList monsters={ filteredMonsters } />\r\n\r\n        \r\n     </div>\r\n\r\n   )\r\n  }\r\n  \r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}